#+TITLE: Red Black Trees Overview
#+DESCRIPTION: An overview of red black trees, their properties, rotation and insertion, and possible classes and methods needed to implement the tree

* TODO CURRENT WIPs
  - Implement Get Sibling Function
  - Work on Search Function
  - Workd on Delete Function
* Binary Search Tree Properties
  - Order, or sorted, binary trees
  - Nodes can have 2 subtrees
  - Items to the left of a given node are smaller
  - Items to the right of a given node are larger
** Time Complexity
   - Can have a large time complexity, since it is just a list in certain situations
   - O(n)
* Red Black Tree Properties
  - Nodes are Red or Black
  - The root and *leaves* (nil children) are black
  - If a node is red, then its children are black
  - Paths from a node to nil contain the same # of black nodes
** Time Complexity 
   - Olog(n)
** Rotations
   - Goal is to decrease the height to satisfy properties
   - Larger subtrees up, smaller subtrees down
*** Left-Rotation
    - Bigger subtrees go up
    - So the node's right subtree becomes the node's parent
    - And the right subtree's left subtree becomes the node's new right subtree
*** Right-Rotation
    - Smaller subtrees go up
    - So the node's left subtee becomes the node's parent
    - Then the left subtree's right subtree becomes the node's new left subtree
** Insertion
   Always add in nodes as red. There are a few different cases when adding.
   1) Adding to root
      - Red becomes black
   2) Parent is black
      - Then we're done
   3) Parent and Uncle are red
      - Change parent and uncle to black
      - Change grandparent to red
      - Recursively call on grandparent (review all cases)
   4) Uncle is black, parent is left and node is right or parent is right and node is left ( triangle )
      - Tree rotation through parent
   5) Uncle is black, parent is left and node is left or parent is right and node is right ( triangle )
      - Rotate through grandparent
      - Switch parent and grandparent colors
** Deletion
*** STEP 1
- If the node that we deleted has 2 NIL children, its replacement /x/ is NIL
- If the node we deleted has 1 NIL child and 1 non-NIL child, its replacement /x/ is the non-NIL child
- If the node we deleted has 2 non-NIL children, set /x/ to the replacement's right child before the replacement is spliced out
*** STEP 2
- If the node we deleted is red and its replacement is red or NIL, we are done
- If the node we deleted is red and its replacement is black, color the replacement red and proceed to the appropriate case
- If the node we deleted is black and its rpelcement is red, color the replacement black. We are done.
- If the node we dleeted is black and its replacement is NIL or black, proceed to the appropriate case
*** STEP 1 | Execute Standard Binary Search Tree Deletion
**** Case 1 : N has no C
     1. Remove N from the tree
**** Case 2 : N has one C
     1. Remove N and replace it with C
**** Case 3 : N has two Cs
     1. Find N's next in-order successor or predecessor
        - For smallest, left one and all the way right. For biggest, right one and all the way left
     2. Set N's *value* to it
        - Don't actually delete it
**** Define Terms!
     - *M* references the node to be deleted
     - *C* references the selected child of *M*, also known as it's child
     - Now we can't complete the binary tree deletion by getting rid of M and moving C up because it might violate red black tree properties, and have to consider a few cases
*** STEP 2 | Call delete on the N in question
    1. First define the child of N
    2. Then replace N completely with the child (Call replace node)
**** Case 1: If N is black (once it got replaced)
     - We're done.
**** Case 2: If C is red (once it replaced parent)
     - Repaint it black
     - We're done.
**** Case 3: C and N is black, move into delete cases
***** Case 1 : N is new root
      - We're done
        - Otherwise, call deleteCase2()
***** Case 2 : S is red
      - Reverse P and S colors
      - Rotate S through P
        - Moves S to N's grandparent
      - Call deleteCase3()
***** Case 3 : P, S, and S's children are black
      - Color S red
      - Recursively call case 1 on P
      - Else call deleteCase4()
***** Case 4: S and S's children are black, P is red.
      - Exchange colors of S and P
      - Else call deleteCase5()
***** Case 5: S is black, S's left child is red, S's right child is black, N is the left child of its parent, OR S is black, S's right child is red, S's left child is black, and N is the right child of its parent
      - Rotate sibling's subtrees through sibling in the corresponding direction to make a line
      - This is right or left respectively
      - Call deleteCase6()
***** Case 6: S is black, S's left child is red, and N is the right child of its parent P, OR S is black, S's right is red, and N is the left child of its parent P
      - Rotate through parent
        - Right or left respectively
        - S becomes parent of P and S's right child. 
      - Exchange colors of P and S
      - Make S's child black
        - Left or right respectively
      - Note: S become's P colors, regardless of P being red or black
